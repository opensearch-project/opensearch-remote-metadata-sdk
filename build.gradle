/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import org.opensearch.gradle.VersionProperties

buildscript {
    ext {
        opensearch_group = "org.opensearch"
        opensearch_version = System.getProperty("opensearch.version", "3.0.0-SNAPSHOT")
        is_snapshot = "true" == System.getProperty("build.snapshot", "true")
        build_version_qualifier = System.getProperty("build.version_qualifier", "")

        log4j_version = '2.24.3'
        jackson_version = '2.18.2'
        apache_http_components_version = '5.4.1'
        apache_http_core_version = '5.3.1'
        aws_sdk_version = '2.29.43'
        junit_version = '5.11.4'
        mockito_version = '5.14.2'
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.25.0"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'checkstyle'

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://artifacts.opensearch.org/releases/" }
    }

    group = opensearch_group
    version = opensearch_version +
        (is_snapshot ? "-SNAPSHOT" : "") +
        (build_version_qualifier ? "-${project.ext.build_version_qualifier}" : "")

    java {
        targetCompatibility = JavaVersion.VERSION_21
        sourceCompatibility = JavaVersion.VERSION_21
        withSourcesJar()
        withJavadocJar()
    }
}

apply from: rootProject.file('formatter/formatting.gradle')

// Task to update version
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}
